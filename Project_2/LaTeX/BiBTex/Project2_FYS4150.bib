Automatically generated by Mendeley Desktop 1.19.4
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Preferences -> BibTeX in Mendeley Desktop 

@article{Morten,

author = {M. Hjorth-Jensen},
doi = {10.1016/j.amc.2008.03.004},
issn = {00963003},
journal = {University of Oslo},
keywords = {Computer algebra systems,Determinants,Doolittle factorizations,Matrices,Pentadiagonal matrix},
month = {},
number = {},
pages = {},
title = {{Computational Physics}},
year = {2013},
volume = {\url{https://github.com/CompPhysics/ComputationalPhysics}}
}


@book{Accuracy_Numerical,
author = {Higham, N.},
pages = {},
title = {Accuracy and Stability of Numerical Algorithms},
publisher = {Society for Industrial and Applied Mathematics},
year = {2002},
doi = {10.1137/1.9780898718027},
address = {},
edition   = {Second}
}

@book{Matrix_Algorithms,
author = {Stewart, G.},
title = {Matrix Algorithms},
publisher = {Society for Industrial and Applied Mathematics},
year = {2001},
doi = {10.1137/1.9780898718058},
address = {},
edition   = {}
}


@article{Sanderson2019,
abstract = {Despite the importance of sparse matrices in numerous fields of science, software implementations remain difficult to use for non-expert users, generally requiring the understanding of the underlying details of the chosen sparse matrix storage format. In addition, to achieve good performance, several formats may need to be used in one program, requiring explicit selection and conversion between the formats. This can be both tedious and error-prone, especially for non-expert users. Motivated by these issues, we present a user-friendly and open-source sparse matrix class for the C++ language, with a high-level application programming interface deliberately similar to the widely-used MATLAB language. This facilitates prototyping directly in C++ and aids the conversion of research code into production environments. The class internally uses two main approaches to achieve efficient execution: (i) a hybrid storage framework, which automatically and seamlessly switches between three underlying storage formats (compressed sparse column, red-black tree, coordinate list) depending on which format is best suited and/or available for specific operations, and (ii) a template-based meta-programming framework to automatically detect and optimise the execution of common expression patterns. Empirical evaluations on large sparse matrices with various densities of non-zero elements demonstrate the advantages of the hybrid storage framework and the expression optimisation mechanism.},
author = {Sanderson, Conrad and Curtin, Ryan},
doi = {10.3390/mca24030070},
file = {:Users/kristoffervarslott/Downloads/2.pdf:pdf},
journal = {Mathematical and Computational Applications},
keywords = {65f50,65y04,65y15,68n99,ams msc2010 codes,arma,associated source code,c,http,language,mathematical software,net,numerical linear algebra,sourceforge,sparse matrix},
number = {3},
pages = {70},
title = {{Practical Sparse Matrices in C++ with Hybrid Storage and Template-Based Expression Optimisation}},
volume = {24},
year = {2019}
}
@article{Saddler1971,
abstract = {The C++ language is often used for implementing functionality that is performance and/or resource sensitive. While the standard C++ library provides many useful algorithms (such as sorting), in its current form it does not provide direct handling of linear algebra (matrix maths). Armadillo is an open source linear algebra library for the C++ language, aiming towards a good balance between speed and ease of use. Its high-level Application Programming Interface (API) is deliberately similar to the widely Matlab and Octave languages (Eaton et al. 2015), so that mathematical operations can be expressed in a familiar and natural manner. The library is useful for algorithm development directly in C++, or relatively quick conversion of research code into production environments. Armadillo provides efficient objects for vectors, matrices and cubes (third order tensors), as well as over 200 associated functions for manipulating data stored in the objects. Integer, floating point and complex numbers are supported, as well as dense and sparse storage formats. Various matrix factorisations are provided through integration with LAPACK (Demmel 1997), or one of its high performance drop-in replacements such as Intel MKL (Intel 2016) or OpenBLAS (Xianyi, Qian, and Saar 2016). It is also possible to use Armadillo in conjunction with NVBLAS to obtain GPU-accelerated matrix multiplication (NVIDIA 2015). Armadillo is used as a base for other open source projects, such as MLPACK, a C++ library for machine learning and pattern recognition (Curtin et al. 2013), and RcppArmadillo, a bridge between the R language and C++ in order to speed up computations (Eddelbuettel and Sanderson 2014). Armadillo internally employs an expression evaluator based on template meta-programming techniques (Abrahams and Gurtovoy 2004), to automatically combine several operations in order to increase speed and efficiency. An overview of the internal architecture is given in (Sanderson 2010).},
author = {Sanderson, Conrad and Curtin, Ryan},
doi = {10.1007/BF01870553},
file = {:Users/kristoffervarslott/Downloads/1.pdf:pdf},
issn = {00222631},
journal = {Journal of Open Source Software},
number = {3},
pages = {26},
title = {{Armadillo: a template-based C++ library for linear algebra.}},
volume = {1},
year = {2016}
}

@article{taut,
  title={Two electrons in an external oscillator potential: Particular analytic solutions of a Coulomb correlation problem},
  author={Taut, M.},
  journal={Physical Review A},
  volume={48},
  number={5},
  pages={3561},
  year={1993},
  publisher={APS}
}